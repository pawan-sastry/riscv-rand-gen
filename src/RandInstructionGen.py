#!/usr/bin/python3
import xml.sax
import random
import Instruction
import ConfigParser

#Instruction set using which instructions are generated
#Keeps track of weight of the instructions,and sources ,destinations and size for use by instruction generator
class InstructionSet( xml.sax.ContentHandler ):
  
    def __init__(self):
      self.currentData = ""
      self.instructionList = {}
      self.newInstruction = ""

    def startElement(self, tag, attributes):
      self.currentData = tag
      if tag == 'Instruction':
        self.newInstruction = Instruction.Instruction(attributes["opcode"])

    def endElement(self, tag):
      if tag == "Instruction":
        self.instructionList[self.newInstruction.opcode] =  self.newInstruction
        self.newInstruction = ""
      self.currentData = ""

    def characters(self, content):
      if self.currentData == 'sources':
        self.newInstruction.set_sources( content.split(",") )
      elif self.currentData == 'destinations':
        self.newInstruction.set_destinations( content.split(",") )
      elif self.currentData == 'instruction_type':
        self.newInstruction.set_instruction_type(content)
      elif self.currentData == 'isa_extension':
        self.newInstruction.set_isa_extension( content.split(",") )
      elif self.currentData == 'size':
        self.newInstruction.set_instruction_size(content)

class RandInstructionGen:
  
  def __init__(self, InstructionSet):
    self.instructionSet = InstructionSet
    self.extensionSup = []
    self.instruction_type_wt = {}
    self.regList = ["x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","x16","x17","x18","x19","x20","x21","x22","x23","x24","x25","x26","x27","x28","x29","x30","x31"]
    self.currRegList = self.regList
    self.currSection = ""
    self.currTestName = ""
    self.sectionList = {}
  
  def read_config(self, ConfigFile):
      self.config = ConfigParser.ConfigParser()
      self.config.read(ConfigFile)
      arch = self.config.get('instruction_config','arch')
      extension_supported = self.config.get('instruction_config','extension')
      if 'I' in extension_supported:
        self.extensionSup.append(arch + 'I')
      if 'M' in extension_supported:
        self.extensionSup.append(arch + 'M')
      if 'A' in extension_supported:
        self.extensionSup.append(arch + 'A')
      if 'F' in extension_supported:
        self.extensionSup.append(arch + 'F')
      if 'D' in extension_supported:
        self.extensionSup.append(arch + 'D')
      if 'G' in extension_supported:
        self.extensionSup.append(arch + 'I')
        self.extensionSup.append(arch + 'M')
        self.extensionSup.append(arch + 'A')
        self.extensionSup.append(arch + 'F')
        self.extensionSup.append(arch + 'D')
      print self.extensionSup
      for key in self.config.options('instruction_weight'):
        self.instruction_type_wt[key] = self.config.get('instruction_weight',key)

      for i in self.instructionSet.instructionList.keys():
          for j in self.instructionSet.instructionList[i].isaExtension:
            if j in self.extensionSup:
              self.instructionSet.instructionList[i].set_weight(self.instruction_type_wt[self.instructionSet.instructionList[i].instructionType])
              break
            else:
              self.instructionSet.instructionList[i].set_weight(0)
            print self.instructionSet.instructionList[i].return_string()

  def start_test_gen(self,TestName):
      #Generate boot code
      self.currTestName = TestName
      self.testFileHandle = open(self.currTestName, "w+")
      self.testFileHandle.write("//THIS FILE IS GENERATED BY RISCV-RAND-GEN\n")
#      self.testFileHandle.write("#include \"encoding.h\"\n\n")
      self.put_section("text",0x80000000)
      self.testFileHandle.write(".globl _start\n_start:\n")
      self.rand_init_all_reg()

  def put_section(self,SectionName, SectionAddress = ""):
      self.testFileHandle.write(".section ."+SectionName+"\n")
      self.sectionList[SectionName] = SectionAddress

  def rand_init_all_reg(self):
      for reg_name in self.regList:
          if reg_name !="x0":
              self.rand_init_reg(reg_name)

  def rand_init_reg(self,reg_name):
      luiInstruction = self.instructionSet.instructionList["lui"]
      luiInstruction.currSources.append(random.getrandbits(20))
      luiInstruction.currDestinations.append(reg_name)
      self.testFileHandle.write("\t"+luiInstruction.instruction_asm_string())
      luiInstruction.reset_fields()
      addiInstruction = self.instructionSet.instructionList["addi"]
      addiInstruction.currSources.append(reg_name)
      addiInstruction.currSources.append(random.getrandbits(12))
      addiInstruction.currDestinations.append(reg_name)
      self.testFileHandle.write("\t"+addiInstruction.instruction_asm_string())
      addiInstruction.reset_fields()
     # luiInstruction.reset_instruction()
        
 # def generate_rand_instr(self,num = 1)
 #   instr_count = 0;
 #   while(instr_count < num):
